using System.IO;
using System.Text;
using UnityEditor;
using UnityEditor.ProjectWindowCallback;
using UnityEngine;

namespace UEAT
{
  public class CreateCodeFile : EndNameEditAction
  {
    public override void Action(int instanceId,string pathName,string resourceFile)
    {
      Object o = CodeTemplates.CreateScript (pathName,resourceFile);
      ProjectWindowUtil.ShowCreatedAsset (o);
    }
  }


  public class CodeTemplates
  {
    private static Texture2D scriptIcon = (EditorGUIUtility.IconContent("cs Script Icon").image as Texture2D);

    public static readonly bool AutoGenerateMenuItems = false;

    // IMPORTANT: This must be the containing folder for this package.
    private const string PackageName = "CodeTemplates";

    private static string PackagePath      = string.Empty;
    private static string ScriptPath       = string.Empty;
    private static string MenuItemsGenPath = string.Empty;
    private static string TemplatesPath    = string.Empty;
    private static string SettingsPath     = string.Empty;

    public static string GetPackagePath()
    {
      if (PackagePath != string.Empty) return PackagePath;
      // Try to locate our package directory in the assets folder
      var assets = AssetDatabase.FindAssets(PackageName);

      bool packageFound = false;
      foreach (var guid in assets)
      {
        var path = AssetDatabase.GUIDToAssetPath(guid);
        if ((File.GetAttributes(path) & FileAttributes.Directory) == FileAttributes.Directory)
        {
          if (packageFound) throw new UnityException("Ambiguous Package name " + PackageName);
          packageFound = true;
          PackagePath = path + Path.DirectorySeparatorChar;
        }
      }
      if (PackagePath == string.Empty) throw new UnityException("Unable to find package!");
      return PackagePath;
    }

    public static string GetScriptPath()
    {
      if (ScriptPath != string.Empty) return ScriptPath;
      ScriptPath = GetPackagePath() + "Editor" + Path.DirectorySeparatorChar;
      return ScriptPath;
    }

    public static string GetMenuItemsGenPath()
    {
      if (MenuItemsGenPath != string.Empty) return MenuItemsGenPath;
      MenuItemsGenPath = GetScriptPath() + "AutoGeneratedMenuItems" + Path.DirectorySeparatorChar;
      return MenuItemsGenPath;
    }

    public static string GetTemplatesPath()
    {
      if (TemplatesPath != string.Empty) return TemplatesPath;
      TemplatesPath = GetPackagePath() + "Templates" + Path.DirectorySeparatorChar;
      return TemplatesPath;
    }

    public static string GetSettingsPath()
    {
      if (SettingsPath != string.Empty) return SettingsPath;
      SettingsPath = GetPackagePath() + "Settings" + Path.DirectorySeparatorChar;
      return SettingsPath;
    }
    

    internal static UnityEngine.Object CreateScript(string pathName, string templatePath)
    {
      string filePath = Path.GetFullPath(pathName);
      string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(pathName);
      string className = fileNameWithoutExtension.Replace(" ", string.Empty);
      string templateContents = string.Empty;

      if (File.Exists (templatePath))
      {
        using (var t = new StreamReader (templatePath))
        {
          t.ReadLine ();
          templateContents = t.ReadToEnd ();
        }

        templateContents = templateContents.Replace("##NAME##", className);

        UTF8Encoding encoding = new UTF8Encoding(true, false);

        using (var tc = new StreamWriter(filePath, false, encoding))
        {
          tc.Write(templateContents);
        }

        AssetDatabase.ImportAsset(pathName);
      }
      return AssetDatabase.LoadAssetAtPath(pathName, typeof(Object));
    }


    public static void CreateFromTemplate(string initialName, string templatePath)
    {
      ProjectWindowUtil.StartNameEditingIfProjectWindowExists(
        0,
        ScriptableObject.CreateInstance<CreateCodeFile>(),
        initialName,
        scriptIcon,
        templatePath);
    }
  }

}
